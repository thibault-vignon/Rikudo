import org.sat4j.core.VecInt;
import java.util.ArrayList;
import org.sat4j.minisat.SolverFactory;
import org.sat4j.specs.ISolver;
import org.sat4j.specs.ContradictionException;
import org.sat4j.specs.TimeoutException;


public class SAT {

	public static void solveSAT(ArrayList<ArrayList<Integer>> graph){
		// Takes as input a graph represented by adjacency lists
		int n = graph.size();
		
		// Create the solver 
				ISolver solver = SolverFactory.newDefault();
				// Convert the Hamiltonian path problem to a CNF
				// Then feed the solver using arrays of int in Dimacs format
				// Boolean x_ij is represented by the integer i*n + j
				try {
					for (int j = 0; j < n; j++) {
						VecInt v = new VecInt();
						for (int i = 0; i < n; i++) {
							solver.addClause(new VecInt(new int[] {1, 2}));
						}
					}
				} catch (ContradictionException e1) {
					e1.printStackTrace();
				}
				// Print parameters of the problem
				System.out.println("Number of variables: " + solver.nVars());
				System.out.println("Number of constraints: " + solver.nConstraints());
				// Solve the problem
				try {
					if (solver.isSatisfiable()) {
						System.out.println("Satisfiable problem!");
						int[] solution = solver.model();
						System.out.println("Solution: " + solution[0] + " " + solution[1]);
					} else {
						System.out.println("Unsatisfiable problem!");
					}
				} catch (TimeoutException e) {
					System.out.println("Timeout, sorry!");
				}
			}

		public static void main(String[] args) {
			
		}
	}