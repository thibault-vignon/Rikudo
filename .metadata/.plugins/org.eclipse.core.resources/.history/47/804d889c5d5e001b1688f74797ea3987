
	import java.util.ArrayList;

	import javafx.application.Application;
	import javafx.stage.Stage;   
	import javafx.scene.*;
	import javafx.scene.chart.NumberAxis;
	import javafx.scene.chart.LineChart;
	import javafx.scene.chart.XYChart;
	
public class Test extends Application {

	@Override
	public void start(Stage stage) {
		
			long startTime = 0;
			long endTime = 0;
			long totalTime = 0;
			int[] solution = new int[0];
			ArrayList<ArrayList<Boolean>> graph = new ArrayList<ArrayList<Boolean>>();
			ArrayList<Boolean> ligne = new ArrayList<Boolean>();
		
	    	NumberAxis xAxis= new NumberAxis(0, 30, 5);
	    	NumberAxis yAxis= new NumberAxis(0, 1000, 100);

		    xAxis.setLabel("Number of vertices");
		    yAxis.setLabel("Runtime");

		    LineChart<Number, Number> chart = new LineChart<>(xAxis, yAxis);
		    chart.setTitle("Runtime for different types of graphs");
		    
		    LineChart.Series complete = new LineChart.Series();
		    complete.setName("Complete graphs");
		    
		    LineChart.Series grid = new LineChart.Series();
		    grid.setName("Grid graphs");
		    
		    LineChart.Series cycle = new LineChart.Series();
		    cycle.setName("Cycle graphs");
		    
		    SAT.solveSAT(graph);
		    
		    for (int n = 2; n < 26; n++) {
		    	graph.clear();
		    	for (int i = 0; i < n; i++) {
		    		ligne.clear();
		    		for (int k = 0; k < n; k++) {
		    			if (k==i) {
		    				ligne.add(false);
		    			}
		    			else {
		    				ligne.add(true);
		    			}
		    		}
		    		graph.add(ligne);
		    	}
		    	
		    	startTime = System.currentTimeMillis();
		    	SAT.solveSAT(graph);
		    	endTime = System.currentTimeMillis();
		    	totalTime = endTime - startTime;
		    	
		    	complete.getData().add(new LineChart.Data(n, totalTime));
		    }
		    
		    chart.getData().add(complete);
		    
		    for (int n = 2; n < 26; n++) {
		    	graph.clear();
		    	for (int i = 0; i < n; i++) {
		    		ligne.clear();
		    		for (int k = 0; k < n; k++) {
		    			if (k == (i+1) % n) {
		    				ligne.add(true);
		    			}
		    			else {
		    				ligne.add(false);
		    			}
		    		}
		    		graph.add(ligne);
		    	}
		    	
		    	startTime = System.currentTimeMillis();
		    	SAT.solveSAT(graph);
		    	endTime = System.currentTimeMillis();
		    	totalTime = endTime - startTime;
		    	
		    	cycle.getData().add(new LineChart.Data(n, totalTime));
		    }
		    
		    chart.getData().add(cycle);
	}
	
	public static void main(String[] args) {
		
	}

}